{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"exit program": {
		"scope": "c,cpp",
		"prefix": "ep",
		"body": [
			"exit(1);",
		],
		"description": "exit program."
	},
	"printf": {
		"scope": "c,cpp",
		"prefix": "prf",
		"body": [
			"printf(\"$1);",
			"$2"
		],
		"description": "printf"
	},
	"scanf": {
		"scope": "c,cpp",
		"prefix": "scf",
		"body": [
			"scanf(\"%$1\", &$2);",
			"$3"
		],
		"description": "scanf"
	},
	"for-loop": {
		"scope": "c,cpp",
		"prefix": "fori",
		"body": [
			"for(int i=0;i<n;i++)",
			"{",
			"    $0",
			"}",
		],
		"description": "initialize generic for loop in c/c++"
	},
	"for-loop2": {
		"scope": "c,cpp",
		"prefix": "forj",
		"body": [
			"for(int j=0;j<n;j++)",
			"{",
			"    $0",
			"}",
		],
		"description": "initialize for loop with iterator variable j in c/c++"
	},
	"Java print line": {
		"scope": "java",
		"prefix": "sout",
		"body": [
			"System.out.println($1);",
			"$2"
		],
		"description": "Print line"
	},
	"Console log": {
		"scope": "javascript",
		"prefix": "clog",
		"body": [
			"console.log($1);",
			"$0"
		],
		"description": "Log output to the console"
	},
	"Python stdin": {
		"scope": "python",
		"prefix": "cin",
		"body": [
			"stdin.readline().strip()",
		],
		"description": "Take input from sys.stdin and strip it"
	},
	"Python stdout": {
		"scope": "python",
		"prefix": "cout",
		"body": [
			"stdout.write($0)",
		],
		"description": "Convert to string and write to sys.stdout"
	},
	"initialize c": {
		"scope": "c",
		"prefix": "init",
		"body": [
			"#include <stdio.h>",
			"#define nl printf(\"\\n\")",
			"",
			"int main()",
			"{",
			"    $1",
			"      ",
			"    return 0;",
			"}"
		],
		"description": "initialize c"
	},
	"initialize c++": {
		"scope": "cpp",
		"prefix": "init",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"int main()",
			"{",
			"    $1",
			"      ",
			"    return 0;",
			"}"
		],
		"description": "initialize c++"
	},
	"c++ cp": {
		"scope": "cpp",
		"prefix": "cpinit",
		"body": [
			"// meow",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#ifndef ONLINE_JUDGE",
			"#include \"debugtemplate.cpp\"",
			"#include \"cerrtemplate.cpp\"",
			"#include \"printers.cpp\"",
			"#else",
			"#define debug(...)",
			"#define debugArr(...)",
			"#endif",
			"#define N 200000",
			"#pragma GCC optimize(\"-O2\")",
			"#define YES cout<<\"YES\\n\"",
			"#define NO cout<<\"NO\\n\"",
			"#define all(v) (v).begin(),(v).end()",
			"#define arrin(a) for (int IDX=0; IDX<n; IDX++) cin >> (a)[IDX]",
			"#define VIN(v) for (auto &element : (v)) cin >> element;",
			"#define ll long long",
			"#define ull unsigned long long",
			"#define vi vector<int>",
			"#define vll vector<long long int>",
			"const int MOD = 1e9+7;",
			"",
			"void solve()",
			"{",
			"    $0",
			"}",
			"",
			"int main()",
			"{",
			"    std::ios_base::sync_with_stdio(false);",
			"    std::cin.tie(NULL);",
			"    ",
			"    int T=1;",
			"    cin>>T;",
			"    ",
			"    while(T--)",
			"        solve();",
			"    return 0;",
			"}"
		],
		"description": "initialize c++ for competitive programming"
	},
	"Debug CP C++": {
		"scope": "cpp",
		"prefix": "deb",
		"body": [
			"#define deb(...) logger(#__VA_ARGS__, __VA_ARGS__)",
			"template<typename ...Args>",
			"void logger(string vars, Args&&... values) {",
			"cout << vars << \" = \";",
			"string delim = \"\";",
			"(..., (cout << delim << values<<'\\n', delim = \", \"));",
			"}",
		],
		"description": "c++ debug template for CP"
	},
	// "python cp": {
	// 	"scope": "python",
	// 	"prefix": "cpinit",
	// 	"body": [
	// 		"from sys import stdin, stdout",
	// 		"#from collections import Counter",
	// 		"#from heapq import nlargest, nsmallest",
	// 		"def getints(): return map(int, stdin.readline().strip().split())",
	// 		"def getstr(): return stdin.readline().strip()",
	// 		"",
	// 		"t=int(stdin.readline().strip())",
	// 		"for _ in range(t):",
	// 		"    $0"
	// 	],
	// 	"description": "initialize python for competitive programming"
	// },
	"python cp": {
		"scope": "python",
		"prefix": "cpinit",
		"body": [
			"# meow",
			"def solve():",
			"    $0",
			"      ",
			"for _ in range(int(input())):",
			"    solve()"
		],
		"description": "initialize python for competitive programming"
	},
	"c++ class body": {
		"scope": "cpp",
		"prefix": "cls",
		"body": [
			"class ${1:myclass}",
			"{",
			"    $2",
			"public:",
			"    ${3:myclass}($4)",
			"    {",
			"        $5",
			"    }",
			"};"
		],
		"description": "c++ class body"
	},
	"c++ template function": {
		"scope": "cpp",
		"prefix": "tfn",
		"body": [
			"template <typename T>",
			"${1:T} ${2:func}($3)",
			"{",
			"    $4",
			"}"
		]
	},
	"c++ template class": {
		"scope": "cpp",
		"prefix": "tcls",
		"body": [
			"template <typename T>",
			"class ${1:myclass}",
			"{",
			"    $3",
			"};"
		]
	},
	"initialize java": {
		"scope": "java",
		"prefix": "init",
		"body": [
			"import java.util.Scanner;",
			"",
			"public class $1 {",
			"    public static void main(String[] args) {",
			"        $2",
			"    }",
			"}"
		],
		"description": "java boilerplate"
	},
	"java main": {
		"scope": "java",
		"prefix": "main",
		"body": [
			"public static void main(String[] args) {",
			"    $1",
            "}"
		],
		"description": "java main function"
	}
}